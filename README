
# 🚀 GetHub – A Version Tracking System in C++

## 📘 Introduction
**GetHub** is a simplified, heap-managed version tracking system written in C++, modeled after GitHub.  
It supports:
- ✅ Dynamic memory management using `new` and `delete`
- ✅ Adding, viewing, and removing Repos and Files
- ✅ Deep-copying Repos using a Client class
- ✅ Clean object-oriented architecture with modular classes
- ✅ A UML diagram visualizing key components

## ⚠️ Notes
This project is intended for Linux environments. You may need to adjust the Makefile for different compilers or platforms.
Only the following files are public:
README.md and UML_Diagram.png
All other source files remain private.

## 📂 Folder Structure
├── Client.cc / Client.h # Client class (deep copy logic)
├── Control.cc / Control.h # Main coordinator/controller
├── Date.cc / Date.h # Helper Date class
├── File.cc / File.h # File class (tracked objects)
├── FileList.cc / FileList.h # Linked list for Files
├── GetHub.cc / GetHub.h # GitHub-style Repo manager
├── Repo.cc / Repo.h # Repo entity
├── RepoList.cc / RepoList.h # Linked list for Repos
├── View.cc / View.h # Text-based user interface
├── TestControl.cc / .h # Testing interface
├── Tester.cc / Tester.h # Core test driver
├── main.cc / test.cc # Entry points
├── Makefile # Build system
└── UML_Diagram.png # UML structure (📎 see below)

## 🛠️ Build Instructions
### ▶️ To Build
bash make

This will generate two executables:
a3 – main interactive GetHub app
a3test – test runner for classes

###🧹 To Clean
bash make clean


##📸 Sample CLI Output
./a3
Initializing GetHub...
Please make a selection:

  (1) Print all repos
  (2) Print repo
  (3) Print file
  (4) Remove repo
  (5) Remove file

 Client functions
  (6) Download repo
  (7) Print client repo
  (8) Print file content
  (0) Exit

./a3test
Please make a selection:

  (1) RepoList test
  (2) GetHub repo test
  (3) GetHub file test
  ...
  (0) Exit

##📊 UML Diagram
A UML diagram (excluding Control, View, and Tester classes) is included that visualizes the architecture.

##🧠 Key Concepts Demonstrated
✅ Heap-based memory management
✅ Deep copying and safe memory ownership
✅ Linked lists for managing Repos and Files
✅ Encapsulation and class separation
✅ Command-line interface with Control & View

##📬 Contact
For questions, feel free to reach out via email - SachinBansal@cmail.carleton.ca
